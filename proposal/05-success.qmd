# Success
<!--
Projects should have a definition of done that is measurable, and a
thorough understanding going in of what the risks are to delivery
-->

## Measuring success

<!--
How will we know when success is achieved, what markers can we use
along the way
-->

This work has a lot of room to grow well beyond what is achievable within three
months.

We would consider this step of the process successful if we can provide a clear
path to the necessary R internal changes required for the implementation of a
DAP server. 

## Definition of done

<!--
What does success look like?
-->

Although aligning on a path forward is largely a communication goal, being
confident in that path requires experimentation. We would consider our part done
after we have proposed changes implemented in a patch to R, and have developed
a pilot implementation to the point that we can be confident that it would be
able to fully cover any reasonable parts of the DAP specification.

Ideally, users in any editor that supports the DAP would have a realistic
path to communicating with our pilot project as the DAP server, and would be
able to interact with an R session in a way that feels native to R.

## Future work

<!--
How could this be extended / developed in the future by yourself
and/or the community in general?
-->

We do not expect a patch that is developed primarily in service of exploration
to be fully mature within these three months. To bring this work to fruition in
R, our hope is that this work displays the importance of R internal support which
would excite a more experienced R core developer to help us integrate this work
into the language properly.

We anticipate that this work will turn up additional challenges. One particular
challenge is the management of breakpoints, which likely requires more explicit
internal handling within the R language to be universal. R's mechanism of
attaching namespaces -- and the proliferation of unique namespaces, especially
through imported namespaces within loaded packages -- means that setting
breakpoints is a non-trivial task. Rigorously handling the synchronization
of IDE-set breakpoints with browser, or traced R calls would likely require
additional tooling within the R language itself. We do not plan to pursue
this as part of this work, though it is necessary for a intuitive debugging
experience when debugging in pathological cases.
